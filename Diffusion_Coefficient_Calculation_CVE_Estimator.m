%% 1) DIffusion coefficeint analysis by CVE estimator and the Jumping angle analysis
        clear all;
        addpath('U:\New data analysis 20ms\SINEB2 NIH3T3')   %path where the data is saved. Spots file is generated by Trackmate software.
        FolderNames = dir('*)*');
        FolderNames = {FolderNames.name};
        MainFolder = pwd;
        ExpTime=0.012; %Exposure Time
        D_CVE=[];
        JumpAngle=[];
        
        
        %Going in each folder
        for j = 1:length(FolderNames)
            cd(FolderNames{j});
            SpotsFile=dir('*Spots in tracks statistics*');
            SpotsFile = SpotsFile.name;
            SpotsFile = readtable(SpotsFile);
            SpotSt=zeros(length(SpotsFile.POSITION_X),8);
            
            SpotSt(:,1)=SpotsFile.TRACK_ID;
            SpotSt(:,2)=SpotsFile.POSITION_X;
            SpotSt(:,3)=SpotsFile.POSITION_Y;
            SpotSt(:,4)=SpotsFile.POSITION_T;
            
%             SpotSt = csvread(SpotsFile,1,2);
%             SpotSt=SpotSt(:,2:7); % Loading the relavant data. 
%             SpotSt(:,2)=[];       % removing quality column
%             SpotSt(:,4)=[];       % removing z position column. Now SpotsSt has 4 columns. Traj Index, x position, y position and  time
%             SpotSt(:,5)=zeros(length(SpotSt),1);  % Adding column for  x2-x1
%             SpotSt(:,6)=zeros(length(SpotSt),1);  % Adding columns for x3-x2
%             SpotSt(:,6)=zeros(length(SpotSt),1);  % Adding columns for y2-y1
%             SpotSt(:,6)=zeros(length(SpotSt),1);  % Adding columns for x3-x2
    
            
            NoTraj=max(SpotSt(:,1))+1; % Number of trajectories
            Dx=zeros(NoTraj,1);
            Dy=zeros(NoTraj,1);
            D=zeros(NoTraj,1);
            
            
            %Looping over each trajectory
            for i=1:NoTraj
                TrajIndex=find(SpotSt(:,1)==(i-1));
                SingleTrajData= SpotSt(TrajIndex,:);
                TrajLen=length(SingleTrajData(:,1));
                
                SumDx=0; SumDy=0; SumDxnDxn1=0; SumDynDyn1=0;
                
                %Calculating (x2-x1), (x2-x1)*(x3-x2),(y2-y1) and(y2-y1)*(y3-y2)values
                for k=1:TrajLen-1
                    x2_x1= SingleTrajData(k+1,2) - SingleTrajData(k,2);
                    y2_y1= SingleTrajData(k+1,3) - SingleTrajData(k,3);
                    
                    v1 = [x2_x1 y2_y1];
                    v1= v1 / norm(v1);
                    if k<TrajLen-1
                        x3_x2= SingleTrajData(k+2,2) - SingleTrajData(k+1,2);
                        y3_y2= SingleTrajData(k+2,3) - SingleTrajData(k+1,3);
                        SumDx=SumDx+ (x2_x1)^2; 
                        SumDy=SumDy + (y2_y1)^2; 
                        SumDxnDxn1=SumDxnDxn1+ abs((x2_x1)*(x3_x2)); 
                        SumDynDyn1=SumDynDyn1+ abs((y2_y1)*(y3_y2));
                        
                        v2 = [x3_x2 y3_y2];
                        v2= v2 / norm(v2);
                        
                        dotV= dot(v1,v2);
                        detV= det([v1;v2]);
                        JumpAngle= [JumpAngle; atan2d(detV,dotV)];
                    end 
                end
               %Finding x,y and 2D diffusion coefficeint of the trajectory. 
                if TrajLen>2
                    Dx(i)= (SumDx/((TrajLen-2)*2*ExpTime)) + (SumDxnDxn1/((TrajLen-2)*ExpTime));
                    Dy(i)= (SumDy/((TrajLen-2)*2*ExpTime)) + (SumDynDyn1/((TrajLen-2)*ExpTime));
                    D(i) = (Dx(i) + Dy(i))/2 ;
                end
                D(D==0)=[];
                
                
            end 
            D_CVE=[D_CVE; D'];
            cd(MainFolder);
        end
        
        
        %Converting Jump angles to 0 to 360 range
        for i=1: length(JumpAngle)
            if JumpAngle(i)<0
                JumpAngle(i) = JumpAngle(i) +360;
            else
                JumpAngle(i) = JumpAngle(i);
            end
        end
        
        Log_D_CVE= log(D_CVE);
        save('D_CVE.mat','D_CVE');
        save('Log_D_CVE.mat','Log_D_CVE')
        save('JumpAngle.mat', 'JumpAngle');
        csvwrite('Log_Log_D_CVE_all_data.csv',Log_D_CVE);
